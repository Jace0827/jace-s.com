# docker-compose.yml
networks:
  frontend_net:
  backend_net:

services:
  # (1) Express 서버
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    develop:
      watch:
        - action: sync+restart
          path: ./server
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json 
    container_name: express_server
    # 외부에 포트 노출 대신, 내부 네트워크에만 포트 개방
    expose:
      - "3000"
    networks:
      - backend_net
    environment:
      - NODE_ENV=production
      - PORT=3000
    restart: always

  # (2) 리액트 클라이언트 (정적 파일 빌드 + Nginx 서빙)
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: react_client
    # 외부에 포트 노출 대신, 내부 네트워크에만 포트 개방
    expose:
      - "80"
      - "443"
    depends_on:
      - server
    networks:
      - frontend_net
      - backend_net
    environment:
      - NODE_ENV=production
    restart: always

  # (3) 실제 외부와 통신하는 게이트웨이 역할의 Nginx
  gateway_nginx:
    image: nginx:alpine
    container_name: gateway_nginx
    
    # 오직 이 컨테이너만 외부 호스트와 포트를 매핑
    ports:
      - "80:80"
      - "443:443"

    # 만약 (로컬 테스트용) 셀프사인 인증서를 사용 중이라면 아래처럼 볼륨 마운트
    # 실제 프로덕션에서는 Let’s Encrypt 등으로 발급받은 인증서를 적용
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl

    depends_on:
      - client
      - server

    # gateway_nginx는 클라이언트, 서버 둘 다 접근 가능해야 하므로 두 네트워크에 모두 참여
    networks:
      - frontend_net
      - backend_net
    restart: always
